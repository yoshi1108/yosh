■1.最近こればっかやってるな、ということ

・フレームワークの変更でDBスキーマが変わり、動かなくなる。
　→「xxx列が無い」というメッセージを見て、適当にVARCHR2でデカ目に切る
　　→動かなければNUMBER型にしてみる

・「xxxのbean、DAOがない」というメッセージを見て、膨大にあるJavaプロジェクトを文字検索する
「このもどかしさに懐かしさを感じる」と思っていたが、
これはBASICやCをeclise等の開発環境なしのテキストエディタ&grepで
開発していた時のルーティンワークに酷似している。
しかし厄介なことに

           解決した時に変な達成感がある

が、これは
「BASICマガジンを目で見て打鍵しミスを修正して動いた時の達成感」
「アキバで買ったジャンクを半田で直して動いた時の達成感」
と似た性質のものであり、本質的には不毛極まりない効率の低下である。
※趣味としては否定しない。事実、最近人がメチャクチャにしたmaven & springを
　「どうせこういう風に間違ってるんだろ？」と類推して修正して
　ビルドができることが楽しくなってきている。

古き悪き開発効率へ回帰していると断言できる。

Javaの静的型付け言語ならeclipseで一瞬で解決するし、
こんなことは起こりえない。

・せっかくJunitのコードを書いてるのに、動かなくなる
フレームワークが変わり、コア部分に必要なDI要素の
追加、削除などがあり分かり得ない。
　「仕様が変わって本体コードを修正したらテストコードが・・・」
みたいのは従来もあるが、これは本来的に正しい流れで致し方ない。
※そもそも、途中でコロコロ仕様が変わることが問題で、別問題。

そして「フレームワークが変わりテストコードが・・・」ということも
従来からあるが、その回避が困難すぎる。
→理由：DIによる疎結が裏目にでて、コードやbean定義から類推できない。
　　　　これがJavaのAPIライブラリの変更なら、eclipseでサッと解決したりする。
　　　　（だからといって楽ではないが、何がおかしいかは割りとすぐわかる。
          内部も追えるし・・・楽ではないが、無理ではない）

はっきりいって、DI要素や入ってくるものが勝手に追加・削除されたやつを
類推でどうにかすることは不可能！！

そもそもそういう「連絡もなしに変わる」こと自体を問題とすべきだが、
発生するのだから仕方ない、発生するべきでない、させないべき、
というならその方法論を含めて反論願いたい。

無論これは１人、数人（せいぜい３人まで。仲良し）でやる場合には発生しないが、
そもそも「大規模にやってても何とか管理するためにmavenを導入」
しているはずなので、根本的に矛盾する。

利用者のレベルが低い(自分含む)ということなのかとずっと思い我慢してきたが、
分かってくれば分かってくるほどにこのspring & mavenシステムは

    作った（構成した？）奴にしか分からない加減を加速させている

とハッキリ感じるようになった。

spring & mavenそれ自体はいいのだが、
管理者が管理しきれない（しきれてないことも理解できない、無理もない）、
ことで管理がルーズになり、よりルーズな内部IF上の変更を許す文化になりやすく
（これはいいことでもあるが、複雑な会社関係で構成されがちがなPJでは致命的）
これを横断的に使ったプロジェクトがうまくいく道理がない。

■2. 何かおかしい、その原因と対策

「それは単に人の連絡、情報統制フレームワークがおかしい」

と単純に思っていたが、どうもそれだけではない。
というか、根本にその問題はあるが、これはある程度どうしようもない。

問題は「そのような情報統制が困難になり、当たり前のように
コンパイルエラーとなっている状況を加速させる」性質が
sprint & mavenシステムにはあるという結論に辿り着いた。
異論はあるだろうが、まず大前提として、道具は悪くない。

知れば知るほどにspringやmaven、jbossはDIやAOPという先進的な仕組みを
実現する素晴らしくよく出来た実装系である、これを否定する者はいないだろう。
※jboss5時代までは起動が遅かったがそれも過去のこと。
  springはjava8辺りからjava自体にいろいろj2ee的ないろいろが追加されて
  いろいろあるが、そういう細かいことは抜きにして。

日々コンパイルエラーになる毎日の中で、mavenの仕組みや実際の操作の基本を
知っていくにつれ、mavenやjenkinsの偉大さ
「キチンと使ったら素晴らしいだろう」
ということはヒシヒシと感じる。
　これが分からない人はmaven、jenkins、springを
単に嫌いか基礎的なことが分かってない。
※私にもそういう時期はあったし、これはみんなあるはずだと思う！！（理由もなくと
にかく嫌だ）

だが、その時期はもう過ぎた。過ぎた上で、maven,spring,jenkinsが素晴らしいと
分かった上での結論だが、

　　　　spring & mavenシステムの大きなプロジェクトは管理者が管理できない

管理者もmavenを熟知していなければ、管理もできない。

■2. postgreSQLばっかやっててoracleでありがちなこと

・Oracle Sql Developer神すぎワロタｗｗｗ

・SQLワークシート内のcreate,update系でcommitを忘れる
→postgreSQLはデフォでautocommit ON だから。
　→逆も真なり。oracle -> postgreSQLの場合は逆でひどい目に合う、と。。。

■2. なぜspring & mavenシステムのプロジェクトが失敗するのか

■2.1

DIなシステムに疲れ果てたんだけど(笑)

シーザーだのjboss&springとかのDI(ダイナミックインジェクション？)を使ったシステム開発に辟易って話ね。

いやまあね、DI自体の概念は凄いし、実装系であるスプリングも凄い優秀なフレームとは思う。

DAOとかのORマッピングとかカッコいいとは思う。

そして「仕事に使うと便利なんだろうなと思った時期」もあったし、ダメな状態のプロジェクト進行になってるのはそこ固有な問題でありスプリングのせいではない、キチンと運用されれば良いだけなんだと思った。

が、うまく運用されることなどない。
そして、上手い上手くないというか、従来のシステム開発にあった「システムが縦割りになってて、責任境界がサーバやプロセス」というのではなく「DIされる部品単位が責任境界で一つのサーバ、プロセス(JVMとかね)に入る」システムみたいのばかりが生産されがちになるよね？

その結果、責任境界も曖昧になるし、作りづらくて仕方ない。

昨今のDIシステム(とザックリ呼んでしまうが)は、簡単な事を難しくしてしまってるプロジェクトばかりな気がするんだよね～

設定やらモジュールが「どこからどう設定されてくるのか」が作ったヤツにしか分からない(分かりづらい)。

ソースから動きが見えない、確かに内部粗結にできるから単体テストコードは書きやすい(時間をかければね…)。


やはり責任境界単位(つまり会社単位ね、下請けの)でサーバなりプロセスなどが分かれて、ソケットやらHTTP通信インターフェースで外部IFがあり、やりあう、というのがいいと思うんだよね。
まあDI関係なく今までも責任境界曖昧になる問題はあったけど、その問題の発生を助長し、例外なくデスマーチ化に導くのがjboss&springシステムだという気がしてきてます！！

作り手も面倒だけど、管理側もDI的な素養がないと上手くコントロールも出来ないと思うし。

というお話しでした。


繰り返しになるけど、jbossやspring自体は凄いし使えるものだと思ってるよ。
