



DIなシステムに疲れ果てたんだけど(笑)

シーザーだのjboss&springとかのDI(ダイナミックインジェクション？)を使ったシステム開発に辟易って話ね。

いやまあね、DI自体の概念は凄いし、実装系であるスプリングも凄い優秀なフレームとは思う。

DAOとかのORマッピングとかカッコいいとは思う。

そして「仕事に使うと便利なんだろうなと思った時期」もあったし、ダメな状態のプロジェクト進行になってるのはそこ固有な問題でありスプリングのせいではない、キチンと運用されれば良いだけなんだと思った。

が、うまく運用されることなどない。
そして、上手い上手くないというか、従来のシステム開発にあった「システムが縦割りになってて、責任境界がサーバやプロセス」というのではなく「DIされる部品単位が責任境界で一つのサーバ、プロセス(JVMとかね)に入る」システムみたいのばかりが生産されがちになるよね？

その結果、責任境界も曖昧になるし、作りづらくて仕方ない。

昨今のDIシステム(とザックリ呼んでしまうが)は、簡単な事を難しくしてしまってるプロジェクトばかりな気がするんだよね～

設定やらモジュールが「どこからどう設定されてくるのか」が作ったヤツにしか分からない(分かりづらい)。

ソースから動きが見えない、確かに内部粗結にできるから単体テストコードは書きやすい(時間をかければね…)。


やはり責任境界単位(つまり会社単位ね、下請けの)でサーバなりプロセスなどが分かれて、ソケットやらHTTP通信インターフェースで外部IFがあり、やりあう、というのがいいと思うんだよね。
まあDI関係なく今までも責任境界曖昧になる問題はあったけど、その問題の発生を助長し、例外なくデスマーチ化に導くのがjboss&springシステムだという気がしてきてます！！

作り手も面倒だけど、管理側もDI的な素養がないと上手くコントロールも出来ないと思うし。

というお話しでした。


繰り返しになるけど、jbossやspring自体は凄いし使えるものだと思ってるよ。
